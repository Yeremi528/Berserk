{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yerem\\\\OneDrive\\\\Escritorio\\\\formulario\\\\src\\\\components\\\\Contact.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport CarouselItem from './CarouselItem';\nimport { mapToCssModules } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SWIPE_THRESHOLD = 40;\n\nclass Carousel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.renderItems = this.renderItems.bind(this);\n    this.hoverStart = this.hoverStart.bind(this);\n    this.hoverEnd = this.hoverEnd.bind(this);\n    this.handleTouchStart = this.handleTouchStart.bind(this);\n    this.handleTouchEnd = this.handleTouchEnd.bind(this);\n    this.touchStartX = 0;\n    this.touchStartY = 0;\n    this.state = {\n      activeIndex: this.props.activeIndex,\n      direction: 'right',\n      indicatorClicked: false\n    };\n  }\n\n  getChildContext() {\n    return {\n      direction: this.state.direction\n    };\n  }\n\n  componentDidMount() {\n    // Set up the cycle\n    if (this.props.ride === 'carousel') {\n      this.setInterval();\n    } // TODO: move this to the specific carousel like bootstrap. Currently it will trigger ALL carousels on the page.\n\n\n    document.addEventListener('keyup', this.handleKeyPress);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    let newState = null;\n    let {\n      activeIndex,\n      direction,\n      indicatorClicked\n    } = prevState;\n\n    if (nextProps.activeIndex !== activeIndex) {\n      // Calculate the direction to turn\n      if (nextProps.activeIndex === activeIndex + 1) {\n        direction = 'right';\n      } else if (nextProps.activeIndex === activeIndex - 1) {\n        direction = 'left';\n      } else if (nextProps.activeIndex < activeIndex) {\n        direction = indicatorClicked ? 'left' : 'right';\n      } else if (nextProps.activeIndex !== activeIndex) {\n        direction = indicatorClicked ? 'right' : 'left';\n      }\n\n      newState = {\n        activeIndex: nextProps.activeIndex,\n        direction,\n        indicatorClicked: false\n      };\n    }\n\n    return newState;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.activeIndex === this.state.activeIndex) return;\n    this.setInterval(this.props);\n  }\n\n  componentWillUnmount() {\n    this.clearInterval();\n    document.removeEventListener('keyup', this.handleKeyPress);\n  }\n\n  setInterval(props = this.props) {\n    // make sure not to have multiple intervals going...\n    this.clearInterval();\n\n    if (props.interval) {\n      this.cycleInterval = setInterval(() => {\n        props.next();\n      }, parseInt(props.interval, 10));\n    }\n  }\n\n  clearInterval() {\n    clearInterval(this.cycleInterval);\n  }\n\n  hoverStart(...args) {\n    if (this.props.pause === 'hover') {\n      this.clearInterval();\n    }\n\n    if (this.props.mouseEnter) {\n      this.props.mouseEnter(...args);\n    }\n  }\n\n  hoverEnd(...args) {\n    if (this.props.pause === 'hover') {\n      this.setInterval();\n    }\n\n    if (this.props.mouseLeave) {\n      this.props.mouseLeave(...args);\n    }\n  }\n\n  handleKeyPress(evt) {\n    if (this.props.keyboard) {\n      if (evt.keyCode === 37) {\n        this.props.previous();\n      } else if (evt.keyCode === 39) {\n        this.props.next();\n      }\n    }\n  }\n\n  handleTouchStart(e) {\n    if (!this.props.enableTouch) {\n      return;\n    }\n\n    this.touchStartX = e.changedTouches[0].screenX;\n    this.touchStartY = e.changedTouches[0].screenY;\n  }\n\n  handleTouchEnd(e) {\n    if (!this.props.enableTouch) {\n      return;\n    }\n\n    const currentX = e.changedTouches[0].screenX;\n    const currentY = e.changedTouches[0].screenY;\n    const diffX = Math.abs(this.touchStartX - currentX);\n    const diffY = Math.abs(this.touchStartY - currentY); // Don't swipe if Y-movement is bigger than X-movement\n\n    if (diffX < diffY) {\n      return;\n    }\n\n    if (diffX < SWIPE_THRESHOLD) {\n      return;\n    }\n\n    if (currentX < this.touchStartX) {\n      this.props.next();\n    } else {\n      this.props.previous();\n    }\n  }\n\n  renderItems(carouselItems, className) {\n    const {\n      slide\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      children: carouselItems.map((item, index) => {\n        const isIn = index === this.state.activeIndex;\n        return /*#__PURE__*/React.cloneElement(item, {\n          in: isIn,\n          slide: slide\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const {\n      cssModule,\n      slide,\n      className\n    } = this.props;\n    const outerClasses = mapToCssModules(classNames(className, 'carousel', slide && 'slide'), cssModule);\n    const innerClasses = mapToCssModules(classNames('carousel-inner'), cssModule); // filter out booleans, null, or undefined\n\n    const children = this.props.children.filter(child => child !== null && child !== undefined && typeof child !== 'boolean');\n    const slidesOnly = children.every(child => child.type === CarouselItem); // Rendering only slides\n\n    if (slidesOnly) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: outerClasses,\n        onMouseEnter: this.hoverStart,\n        onMouseLeave: this.hoverEnd,\n        children: this.renderItems(children, innerClasses)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this);\n    } // Rendering slides and controls\n\n\n    if (children[0] instanceof Array) {\n      const carouselItems = children[0];\n      const controlLeft = children[1];\n      const controlRight = children[2];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: outerClasses,\n        onMouseEnter: this.hoverStart,\n        onMouseLeave: this.hoverEnd,\n        children: [this.renderItems(carouselItems, innerClasses), controlLeft, controlRight]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this);\n    } // Rendering indicators, slides and controls\n\n\n    const indicators = children[0];\n\n    const wrappedOnClick = e => {\n      if (typeof indicators.props.onClickHandler === 'function') {\n        this.setState({\n          indicatorClicked: true\n        }, () => indicators.props.onClickHandler(e));\n      }\n    };\n\n    const wrappedIndicators = /*#__PURE__*/React.cloneElement(indicators, {\n      onClickHandler: wrappedOnClick\n    });\n    const carouselItems = children[1];\n    const controlLeft = children[2];\n    const controlRight = children[3];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: outerClasses,\n      onMouseEnter: this.hoverStart,\n      onMouseLeave: this.hoverEnd,\n      onTouchStart: this.handleTouchStart,\n      onTouchEnd: this.handleTouchEnd,\n      children: [wrappedIndicators, this.renderItems(carouselItems, innerClasses), controlLeft, controlRight]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nCarousel.propTypes = {\n  // the current active slide of the carousel\n  activeIndex: PropTypes.number,\n  // a function which should advance the carousel to the next slide (via activeIndex)\n  next: PropTypes.func.isRequired,\n  // a function which should advance the carousel to the previous slide (via activeIndex)\n  previous: PropTypes.func.isRequired,\n  // controls if the left and right arrow keys should control the carousel\n  keyboard: PropTypes.bool,\n\n  /* If set to \"hover\", pauses the cycling of the carousel on mouseenter and resumes the cycling of the carousel on\r\n   * mouseleave. If set to false, hovering over the carousel won't pause it. (default: \"hover\")\r\n   */\n  pause: PropTypes.oneOf(['hover', false]),\n  // Autoplays the carousel after the user manually cycles the first item. If \"carousel\", autoplays the carousel on load.\n  // This is how bootstrap defines it... I would prefer a bool named autoplay or something...\n  ride: PropTypes.oneOf(['carousel']),\n  // the interval at which the carousel automatically cycles (default: 5000)\n  // eslint-disable-next-line react/no-unused-prop-types\n  interval: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),\n  children: PropTypes.array,\n  // called when the mouse enters the Carousel\n  mouseEnter: PropTypes.func,\n  // called when the mouse exits the Carousel\n  mouseLeave: PropTypes.func,\n  // controls whether the slide animation on the Carousel works or not\n  slide: PropTypes.bool,\n  cssModule: PropTypes.object,\n  className: PropTypes.string,\n  enableTouch: PropTypes.bool\n};\nCarousel.defaultProps = {\n  interval: 5000,\n  pause: 'hover',\n  keyboard: true,\n  slide: true,\n  enableTouch: true\n};\nCarousel.childContextTypes = {\n  direction: PropTypes.string\n};\nexport default Carousel;","map":{"version":3,"sources":["C:/Users/yerem/OneDrive/Escritorio/formulario/src/components/Contact.js"],"names":["React","PropTypes","classNames","CarouselItem","mapToCssModules","SWIPE_THRESHOLD","Carousel","Component","constructor","props","handleKeyPress","bind","renderItems","hoverStart","hoverEnd","handleTouchStart","handleTouchEnd","touchStartX","touchStartY","state","activeIndex","direction","indicatorClicked","getChildContext","componentDidMount","ride","setInterval","document","addEventListener","getDerivedStateFromProps","nextProps","prevState","newState","componentDidUpdate","prevProps","componentWillUnmount","clearInterval","removeEventListener","interval","cycleInterval","next","parseInt","args","pause","mouseEnter","mouseLeave","evt","keyboard","keyCode","previous","e","enableTouch","changedTouches","screenX","screenY","currentX","currentY","diffX","Math","abs","diffY","carouselItems","className","slide","map","item","index","isIn","cloneElement","in","render","cssModule","outerClasses","innerClasses","children","filter","child","undefined","slidesOnly","every","type","Array","controlLeft","controlRight","indicators","wrappedOnClick","onClickHandler","setState","wrappedIndicators","propTypes","number","func","isRequired","bool","oneOf","oneOfType","string","array","object","defaultProps","childContextTypes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,eAAT,QAAgC,SAAhC;;AAEA,MAAMC,eAAe,GAAG,EAAxB;;AAEA,MAAMC,QAAN,SAAuBN,KAAK,CAACO,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKG,QAAL,GAAgB,KAAKA,QAAL,CAAcH,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKI,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBJ,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKK,cAAL,GAAsB,KAAKA,cAAL,CAAoBL,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKM,WAAL,GAAmB,CAAnB;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,KAAKX,KAAL,CAAWW,WADb;AAEXC,MAAAA,SAAS,EAAE,OAFA;AAGXC,MAAAA,gBAAgB,EAAE;AAHP,KAAb;AAKD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,WAAO;AAAEF,MAAAA,SAAS,EAAE,KAAKF,KAAL,CAAWE;AAAxB,KAAP;AACD;;AAEDG,EAAAA,iBAAiB,GAAG;AAClB;AACA,QAAI,KAAKf,KAAL,CAAWgB,IAAX,KAAoB,UAAxB,EAAoC;AAClC,WAAKC,WAAL;AACD,KAJiB,CAMlB;;;AACAC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmC,KAAKlB,cAAxC;AACD;;AAE8B,SAAxBmB,wBAAwB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACpD,QAAIC,QAAQ,GAAG,IAAf;AACA,QAAI;AAAEZ,MAAAA,WAAF;AAAeC,MAAAA,SAAf;AAA0BC,MAAAA;AAA1B,QAA+CS,SAAnD;;AAEA,QAAID,SAAS,CAACV,WAAV,KAA0BA,WAA9B,EAA2C;AACzC;AACA,UAAIU,SAAS,CAACV,WAAV,KAA0BA,WAAW,GAAG,CAA5C,EAA+C;AAC7CC,QAAAA,SAAS,GAAG,OAAZ;AACD,OAFD,MAEO,IAAIS,SAAS,CAACV,WAAV,KAA0BA,WAAW,GAAE,CAA3C,EAA8C;AACnDC,QAAAA,SAAS,GAAG,MAAZ;AACD,OAFM,MAEA,IAAIS,SAAS,CAACV,WAAV,GAAwBA,WAA5B,EAAyC;AAC9CC,QAAAA,SAAS,GAAGC,gBAAgB,GAAG,MAAH,GAAY,OAAxC;AACD,OAFM,MAEA,IAAIQ,SAAS,CAACV,WAAV,KAA0BA,WAA9B,EAA2C;AAChDC,QAAAA,SAAS,GAAGC,gBAAgB,GAAG,OAAH,GAAa,MAAzC;AACD;;AAEDU,MAAAA,QAAQ,GAAG;AACTZ,QAAAA,WAAW,EAAEU,SAAS,CAACV,WADd;AAETC,QAAAA,SAFS;AAGTC,QAAAA,gBAAgB,EAAE;AAHT,OAAX;AAKD;;AAED,WAAOU,QAAP;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYH,SAAZ,EAAuB;AACvC,QAAIA,SAAS,CAACX,WAAV,KAA0B,KAAKD,KAAL,CAAWC,WAAzC,EAAsD;AACtD,SAAKM,WAAL,CAAiB,KAAKjB,KAAtB;AACD;;AAED0B,EAAAA,oBAAoB,GAAG;AACrB,SAAKC,aAAL;AACAT,IAAAA,QAAQ,CAACU,mBAAT,CAA6B,OAA7B,EAAsC,KAAK3B,cAA3C;AACD;;AAEDgB,EAAAA,WAAW,CAACjB,KAAK,GAAG,KAAKA,KAAd,EAAqB;AAC9B;AACA,SAAK2B,aAAL;;AACA,QAAI3B,KAAK,CAAC6B,QAAV,EAAoB;AAClB,WAAKC,aAAL,GAAqBb,WAAW,CAAC,MAAM;AACrCjB,QAAAA,KAAK,CAAC+B,IAAN;AACD,OAF+B,EAE7BC,QAAQ,CAAChC,KAAK,CAAC6B,QAAP,EAAiB,EAAjB,CAFqB,CAAhC;AAGD;AACF;;AAEDF,EAAAA,aAAa,GAAG;AACdA,IAAAA,aAAa,CAAC,KAAKG,aAAN,CAAb;AACD;;AAED1B,EAAAA,UAAU,CAAC,GAAG6B,IAAJ,EAAU;AAClB,QAAI,KAAKjC,KAAL,CAAWkC,KAAX,KAAqB,OAAzB,EAAkC;AAChC,WAAKP,aAAL;AACD;;AACD,QAAI,KAAK3B,KAAL,CAAWmC,UAAf,EAA2B;AACzB,WAAKnC,KAAL,CAAWmC,UAAX,CAAsB,GAAGF,IAAzB;AACD;AACF;;AAED5B,EAAAA,QAAQ,CAAC,GAAG4B,IAAJ,EAAU;AAChB,QAAI,KAAKjC,KAAL,CAAWkC,KAAX,KAAqB,OAAzB,EAAkC;AAChC,WAAKjB,WAAL;AACD;;AACD,QAAI,KAAKjB,KAAL,CAAWoC,UAAf,EAA2B;AACzB,WAAKpC,KAAL,CAAWoC,UAAX,CAAsB,GAAGH,IAAzB;AACD;AACF;;AAEDhC,EAAAA,cAAc,CAACoC,GAAD,EAAM;AAClB,QAAI,KAAKrC,KAAL,CAAWsC,QAAf,EAAyB;AACvB,UAAID,GAAG,CAACE,OAAJ,KAAgB,EAApB,EAAwB;AACtB,aAAKvC,KAAL,CAAWwC,QAAX;AACD,OAFD,MAEO,IAAIH,GAAG,CAACE,OAAJ,KAAgB,EAApB,EAAwB;AAC7B,aAAKvC,KAAL,CAAW+B,IAAX;AACD;AACF;AACF;;AAEDzB,EAAAA,gBAAgB,CAACmC,CAAD,EAAI;AAClB,QAAG,CAAC,KAAKzC,KAAL,CAAW0C,WAAf,EAA4B;AAC1B;AACD;;AACD,SAAKlC,WAAL,GAAmBiC,CAAC,CAACE,cAAF,CAAiB,CAAjB,EAAoBC,OAAvC;AACA,SAAKnC,WAAL,GAAmBgC,CAAC,CAACE,cAAF,CAAiB,CAAjB,EAAoBE,OAAvC;AACD;;AAEDtC,EAAAA,cAAc,CAACkC,CAAD,EAAI;AAChB,QAAG,CAAC,KAAKzC,KAAL,CAAW0C,WAAf,EAA4B;AAC1B;AACD;;AAED,UAAMI,QAAQ,GAAGL,CAAC,CAACE,cAAF,CAAiB,CAAjB,EAAoBC,OAArC;AACA,UAAMG,QAAQ,GAAGN,CAAC,CAACE,cAAF,CAAiB,CAAjB,EAAoBE,OAArC;AACA,UAAMG,KAAK,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAK1C,WAAL,GAAmBsC,QAA5B,CAAd;AACA,UAAMK,KAAK,GAAGF,IAAI,CAACC,GAAL,CAAS,KAAKzC,WAAL,GAAmBsC,QAA5B,CAAd,CARgB,CAUhB;;AACA,QAAGC,KAAK,GAAGG,KAAX,EAAkB;AAChB;AACD;;AAED,QAAGH,KAAK,GAAGpD,eAAX,EAA4B;AAC1B;AACD;;AAED,QAAGkD,QAAQ,GAAG,KAAKtC,WAAnB,EAAgC;AAC9B,WAAKR,KAAL,CAAW+B,IAAX;AACD,KAFD,MAEO;AACL,WAAK/B,KAAL,CAAWwC,QAAX;AACD;AACF;;AAEDrC,EAAAA,WAAW,CAACiD,aAAD,EAAgBC,SAAhB,EAA2B;AACpC,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKtD,KAAvB;AACA,wBACE;AAAK,MAAA,SAAS,EAAEqD,SAAhB;AAAA,gBACGD,aAAa,CAACG,GAAd,CAAkB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAClC,cAAMC,IAAI,GAAID,KAAK,KAAK,KAAK/C,KAAL,CAAWC,WAAnC;AACA,4BAAOpB,KAAK,CAACoE,YAAN,CAAmBH,IAAnB,EAAyB;AAC9BI,UAAAA,EAAE,EAAEF,IAD0B;AAE9BJ,UAAAA,KAAK,EAAEA;AAFuB,SAAzB,CAAP;AAID,OANA;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AAEDO,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaR,MAAAA,KAAb;AAAoBD,MAAAA;AAApB,QAAkC,KAAKrD,KAA7C;AACA,UAAM+D,YAAY,GAAGpE,eAAe,CAACF,UAAU,CAC7C4D,SAD6C,EAE7C,UAF6C,EAG7CC,KAAK,IAAI,OAHoC,CAAX,EAIjCQ,SAJiC,CAApC;AAMA,UAAME,YAAY,GAAGrE,eAAe,CAACF,UAAU,CAC7C,gBAD6C,CAAX,EAEjCqE,SAFiC,CAApC,CARO,CAYP;;AACA,UAAMG,QAAQ,GAAG,KAAKjE,KAAL,CAAWiE,QAAX,CAAoBC,MAApB,CAA2BC,KAAK,IAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAA5B,IAAyC,OAAOD,KAAP,KAAiB,SAA9F,CAAjB;AAEA,UAAME,UAAU,GAAGJ,QAAQ,CAACK,KAAT,CAAeH,KAAK,IAAIA,KAAK,CAACI,IAAN,KAAe7E,YAAvC,CAAnB,CAfO,CAiBP;;AACA,QAAI2E,UAAJ,EAAgB;AACd,0BACE;AAAK,QAAA,SAAS,EAAEN,YAAhB;AAA8B,QAAA,YAAY,EAAE,KAAK3D,UAAjD;AAA6D,QAAA,YAAY,EAAE,KAAKC,QAAhF;AAAA,kBACG,KAAKF,WAAL,CAAiB8D,QAAjB,EAA2BD,YAA3B;AADH;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KAxBM,CA0BP;;;AACA,QAAIC,QAAQ,CAAC,CAAD,CAAR,YAAuBO,KAA3B,EAAkC;AAChC,YAAMpB,aAAa,GAAGa,QAAQ,CAAC,CAAD,CAA9B;AACA,YAAMQ,WAAW,GAAGR,QAAQ,CAAC,CAAD,CAA5B;AACA,YAAMS,YAAY,GAAGT,QAAQ,CAAC,CAAD,CAA7B;AAEA,0BACE;AAAK,QAAA,SAAS,EAAEF,YAAhB;AAA8B,QAAA,YAAY,EAAE,KAAK3D,UAAjD;AAA6D,QAAA,YAAY,EAAE,KAAKC,QAAhF;AAAA,mBACG,KAAKF,WAAL,CAAiBiD,aAAjB,EAAgCY,YAAhC,CADH,EAEGS,WAFH,EAGGC,YAHH;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAOD,KAvCM,CAyCP;;;AACA,UAAMC,UAAU,GAAGV,QAAQ,CAAC,CAAD,CAA3B;;AACA,UAAMW,cAAc,GAAInC,CAAD,IAAO;AAC5B,UAAI,OAAOkC,UAAU,CAAC3E,KAAX,CAAiB6E,cAAxB,KAA2C,UAA/C,EAA2D;AACzD,aAAKC,QAAL,CAAc;AAAEjE,UAAAA,gBAAgB,EAAE;AAApB,SAAd,EAA0C,MAAM8D,UAAU,CAAC3E,KAAX,CAAiB6E,cAAjB,CAAgCpC,CAAhC,CAAhD;AACD;AACF,KAJD;;AAKA,UAAMsC,iBAAiB,gBAAGxF,KAAK,CAACoE,YAAN,CAAmBgB,UAAnB,EAA+B;AAAEE,MAAAA,cAAc,EAAED;AAAlB,KAA/B,CAA1B;AACA,UAAMxB,aAAa,GAAGa,QAAQ,CAAC,CAAD,CAA9B;AACA,UAAMQ,WAAW,GAAGR,QAAQ,CAAC,CAAD,CAA5B;AACA,UAAMS,YAAY,GAAGT,QAAQ,CAAC,CAAD,CAA7B;AAEA,wBACE;AAAK,MAAA,SAAS,EAAEF,YAAhB;AAA8B,MAAA,YAAY,EAAE,KAAK3D,UAAjD;AAA6D,MAAA,YAAY,EAAE,KAAKC,QAAhF;AACE,MAAA,YAAY,EAAE,KAAKC,gBADrB;AACuC,MAAA,UAAU,EAAE,KAAKC,cADxD;AAAA,iBAEGwE,iBAFH,EAGG,KAAK5E,WAAL,CAAiBiD,aAAjB,EAAgCY,YAAhC,CAHH,EAIGS,WAJH,EAKGC,YALH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AA7NoC;;AAgOvC7E,QAAQ,CAACmF,SAAT,GAAqB;AACnB;AACArE,EAAAA,WAAW,EAAEnB,SAAS,CAACyF,MAFJ;AAGnB;AACAlD,EAAAA,IAAI,EAAEvC,SAAS,CAAC0F,IAAV,CAAeC,UAJF;AAKnB;AACA3C,EAAAA,QAAQ,EAAEhD,SAAS,CAAC0F,IAAV,CAAeC,UANN;AAOnB;AACA7C,EAAAA,QAAQ,EAAE9C,SAAS,CAAC4F,IARD;;AASnB;AACF;AACA;AACElD,EAAAA,KAAK,EAAE1C,SAAS,CAAC6F,KAAV,CAAgB,CAAC,OAAD,EAAU,KAAV,CAAhB,CAZY;AAanB;AACA;AACArE,EAAAA,IAAI,EAAExB,SAAS,CAAC6F,KAAV,CAAgB,CAAC,UAAD,CAAhB,CAfa;AAgBnB;AACA;AACAxD,EAAAA,QAAQ,EAAErC,SAAS,CAAC8F,SAAV,CAAoB,CAC5B9F,SAAS,CAACyF,MADkB,EAE5BzF,SAAS,CAAC+F,MAFkB,EAG5B/F,SAAS,CAAC4F,IAHkB,CAApB,CAlBS;AAuBnBnB,EAAAA,QAAQ,EAAEzE,SAAS,CAACgG,KAvBD;AAwBnB;AACArD,EAAAA,UAAU,EAAE3C,SAAS,CAAC0F,IAzBH;AA0BnB;AACA9C,EAAAA,UAAU,EAAE5C,SAAS,CAAC0F,IA3BH;AA4BnB;AACA5B,EAAAA,KAAK,EAAE9D,SAAS,CAAC4F,IA7BE;AA8BnBtB,EAAAA,SAAS,EAAEtE,SAAS,CAACiG,MA9BF;AA+BnBpC,EAAAA,SAAS,EAAE7D,SAAS,CAAC+F,MA/BF;AAgCnB7C,EAAAA,WAAW,EAAElD,SAAS,CAAC4F;AAhCJ,CAArB;AAmCAvF,QAAQ,CAAC6F,YAAT,GAAwB;AACtB7D,EAAAA,QAAQ,EAAE,IADY;AAEtBK,EAAAA,KAAK,EAAE,OAFe;AAGtBI,EAAAA,QAAQ,EAAE,IAHY;AAItBgB,EAAAA,KAAK,EAAE,IAJe;AAKtBZ,EAAAA,WAAW,EAAE;AALS,CAAxB;AAQA7C,QAAQ,CAAC8F,iBAAT,GAA6B;AAC3B/E,EAAAA,SAAS,EAAEpB,SAAS,CAAC+F;AADM,CAA7B;AAIA,eAAe1F,QAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport CarouselItem from './CarouselItem';\r\nimport { mapToCssModules } from './utils';\r\n    \r\nconst SWIPE_THRESHOLD = 40;\r\n\r\nclass Carousel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n    this.renderItems = this.renderItems.bind(this);\r\n    this.hoverStart = this.hoverStart.bind(this);\r\n    this.hoverEnd = this.hoverEnd.bind(this);\r\n    this.handleTouchStart = this.handleTouchStart.bind(this);\r\n    this.handleTouchEnd = this.handleTouchEnd.bind(this);\r\n    this.touchStartX = 0;\r\n    this.touchStartY = 0;\r\n    this.state = {\r\n      activeIndex: this.props.activeIndex,\r\n      direction: 'right',\r\n      indicatorClicked: false,\r\n    };\r\n  }\r\n\r\n  getChildContext() {\r\n    return { direction: this.state.direction };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Set up the cycle\r\n    if (this.props.ride === 'carousel') {\r\n      this.setInterval();\r\n    }\r\n\r\n    // TODO: move this to the specific carousel like bootstrap. Currently it will trigger ALL carousels on the page.\r\n    document.addEventListener('keyup', this.handleKeyPress);\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    let newState = null;\r\n    let { activeIndex, direction, indicatorClicked } = prevState;\r\n\r\n    if (nextProps.activeIndex !== activeIndex) {\r\n      // Calculate the direction to turn\r\n      if (nextProps.activeIndex === activeIndex + 1) {\r\n        direction = 'right';\r\n      } else if (nextProps.activeIndex === activeIndex -1) {\r\n        direction = 'left';\r\n      } else if (nextProps.activeIndex < activeIndex) {\r\n        direction = indicatorClicked ? 'left' : 'right';\r\n      } else if (nextProps.activeIndex !== activeIndex) {\r\n        direction = indicatorClicked ? 'right' : 'left';\r\n      }\r\n\r\n      newState = {\r\n        activeIndex: nextProps.activeIndex,\r\n        direction,\r\n        indicatorClicked: false,\r\n      }\r\n    }\r\n\r\n    return newState;\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.activeIndex === this.state.activeIndex) return;\r\n    this.setInterval(this.props);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.clearInterval();\r\n    document.removeEventListener('keyup', this.handleKeyPress);\r\n  }\r\n\r\n  setInterval(props = this.props) {\r\n    // make sure not to have multiple intervals going...\r\n    this.clearInterval();\r\n    if (props.interval) {\r\n      this.cycleInterval = setInterval(() => {\r\n        props.next();\r\n      }, parseInt(props.interval, 10));\r\n    }\r\n  }\r\n\r\n  clearInterval() {\r\n    clearInterval(this.cycleInterval);\r\n  }\r\n\r\n  hoverStart(...args) {\r\n    if (this.props.pause === 'hover') {\r\n      this.clearInterval();\r\n    }\r\n    if (this.props.mouseEnter) {\r\n      this.props.mouseEnter(...args);\r\n    }\r\n  }\r\n\r\n  hoverEnd(...args) {\r\n    if (this.props.pause === 'hover') {\r\n      this.setInterval();\r\n    }\r\n    if (this.props.mouseLeave) {\r\n      this.props.mouseLeave(...args);\r\n    }\r\n  }\r\n\r\n  handleKeyPress(evt) {\r\n    if (this.props.keyboard) {\r\n      if (evt.keyCode === 37) {\r\n        this.props.previous();\r\n      } else if (evt.keyCode === 39) {\r\n        this.props.next();\r\n      }\r\n    }\r\n  }\r\n\r\n  handleTouchStart(e) {\r\n    if(!this.props.enableTouch) {\r\n      return;\r\n    }\r\n    this.touchStartX = e.changedTouches[0].screenX;\r\n    this.touchStartY = e.changedTouches[0].screenY;\r\n  }\r\n\r\n  handleTouchEnd(e) {\r\n    if(!this.props.enableTouch) {\r\n      return;\r\n    }\r\n\r\n    const currentX = e.changedTouches[0].screenX;\r\n    const currentY = e.changedTouches[0].screenY;\r\n    const diffX = Math.abs(this.touchStartX - currentX);\r\n    const diffY = Math.abs(this.touchStartY - currentY);\r\n\r\n    // Don't swipe if Y-movement is bigger than X-movement\r\n    if(diffX < diffY) {\r\n      return;\r\n    }\r\n\r\n    if(diffX < SWIPE_THRESHOLD) {\r\n      return;\r\n    }\r\n\r\n    if(currentX < this.touchStartX) {\r\n      this.props.next();\r\n    } else {\r\n      this.props.previous();\r\n    }\r\n  }\r\n\r\n  renderItems(carouselItems, className) {\r\n    const { slide } = this.props;\r\n    return (\r\n      <div className={className}>\r\n        {carouselItems.map((item, index) => {\r\n          const isIn = (index === this.state.activeIndex);\r\n          return React.cloneElement(item, {\r\n            in: isIn,\r\n            slide: slide,\r\n          });\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { cssModule, slide, className } = this.props;\r\n    const outerClasses = mapToCssModules(classNames(\r\n      className,\r\n      'carousel',\r\n      slide && 'slide'\r\n    ), cssModule);\r\n\r\n    const innerClasses = mapToCssModules(classNames(\r\n      'carousel-inner'\r\n    ), cssModule);\r\n\r\n    // filter out booleans, null, or undefined\r\n    const children = this.props.children.filter(child => child !== null && child !== undefined && typeof child !== 'boolean');\r\n\r\n    const slidesOnly = children.every(child => child.type === CarouselItem);\r\n\r\n    // Rendering only slides\r\n    if (slidesOnly) {\r\n      return (\r\n        <div className={outerClasses} onMouseEnter={this.hoverStart} onMouseLeave={this.hoverEnd}>\r\n          {this.renderItems(children, innerClasses)}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Rendering slides and controls\r\n    if (children[0] instanceof Array) {\r\n      const carouselItems = children[0];\r\n      const controlLeft = children[1];\r\n      const controlRight = children[2];\r\n\r\n      return (\r\n        <div className={outerClasses} onMouseEnter={this.hoverStart} onMouseLeave={this.hoverEnd}>\r\n          {this.renderItems(carouselItems, innerClasses)}\r\n          {controlLeft}\r\n          {controlRight}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Rendering indicators, slides and controls\r\n    const indicators = children[0];\r\n    const wrappedOnClick = (e) => {\r\n      if (typeof indicators.props.onClickHandler === 'function') {\r\n        this.setState({ indicatorClicked: true }, () => indicators.props.onClickHandler(e));\r\n      }\r\n    };\r\n    const wrappedIndicators = React.cloneElement(indicators, { onClickHandler: wrappedOnClick });\r\n    const carouselItems = children[1];\r\n    const controlLeft = children[2];\r\n    const controlRight = children[3];\r\n\r\n    return (\r\n      <div className={outerClasses} onMouseEnter={this.hoverStart} onMouseLeave={this.hoverEnd}\r\n        onTouchStart={this.handleTouchStart} onTouchEnd={this.handleTouchEnd}>\r\n        {wrappedIndicators}\r\n        {this.renderItems(carouselItems, innerClasses)}\r\n        {controlLeft}\r\n        {controlRight}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCarousel.propTypes = {\r\n  // the current active slide of the carousel\r\n  activeIndex: PropTypes.number,\r\n  // a function which should advance the carousel to the next slide (via activeIndex)\r\n  next: PropTypes.func.isRequired,\r\n  // a function which should advance the carousel to the previous slide (via activeIndex)\r\n  previous: PropTypes.func.isRequired,\r\n  // controls if the left and right arrow keys should control the carousel\r\n  keyboard: PropTypes.bool,\r\n  /* If set to \"hover\", pauses the cycling of the carousel on mouseenter and resumes the cycling of the carousel on\r\n   * mouseleave. If set to false, hovering over the carousel won't pause it. (default: \"hover\")\r\n   */\r\n  pause: PropTypes.oneOf(['hover', false]),\r\n  // Autoplays the carousel after the user manually cycles the first item. If \"carousel\", autoplays the carousel on load.\r\n  // This is how bootstrap defines it... I would prefer a bool named autoplay or something...\r\n  ride: PropTypes.oneOf(['carousel']),\r\n  // the interval at which the carousel automatically cycles (default: 5000)\r\n  // eslint-disable-next-line react/no-unused-prop-types\r\n  interval: PropTypes.oneOfType([\r\n    PropTypes.number,\r\n    PropTypes.string,\r\n    PropTypes.bool,\r\n  ]),\r\n  children: PropTypes.array,\r\n  // called when the mouse enters the Carousel\r\n  mouseEnter: PropTypes.func,\r\n  // called when the mouse exits the Carousel\r\n  mouseLeave: PropTypes.func,\r\n  // controls whether the slide animation on the Carousel works or not\r\n  slide: PropTypes.bool,\r\n  cssModule: PropTypes.object,\r\n  className: PropTypes.string,\r\n  enableTouch: PropTypes.bool,\r\n};\r\n\r\nCarousel.defaultProps = {\r\n  interval: 5000,\r\n  pause: 'hover',\r\n  keyboard: true,\r\n  slide: true,\r\n  enableTouch: true,\r\n};\r\n\r\nCarousel.childContextTypes = {\r\n  direction: PropTypes.string\r\n};\r\n\r\nexport default Carousel;"]},"metadata":{},"sourceType":"module"}